{"ast":null,"code":"var _jsxFileName = \"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Letter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { EasyContext } from './Easy.jsx';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Letter(_ref) {\n  _s();\n\n  let {\n    letterPos,\n    attemptVal\n  } = _ref;\n  const {\n    board,\n    correctWord,\n    currTry\n  } = useContext(EasyContext);\n  const letter = board[attemptVal][letterPos];\n\n  const checkDuplicate = letter => {\n    var currWord = \"\";\n\n    for (let i = 0; i <= letterPos; i++) {\n      currWord += board[attemptVal][i];\n    }\n\n    const currLength = currWord.split(letter).length;\n    const length = correctWord.split(letter).length;\n\n    if (currLength > length) {\n      return false;\n    } else {\n      return true;\n    } // why the following function does not work?\n    // const occurance = [...correctWord].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n    // const currOccur = [...currWord].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n    // if (occurance.get(letter) < currOccur.get(letter)) {\n    //     return false;\n    // } else {\n    //     return true;\n    // }\n\n  };\n\n  const correct = currTry.noOfAttempt > attemptVal && correctWord[letterPos] === letter;\n  const almost = currTry.noOfAttempt > attemptVal && !correct && letter !== \"\" && correctWord.includes(letter) && checkDuplicate(letter);\n  const letterState = currTry.noOfAttempt > attemptVal ? correct ? \"correct\" : almost ? \"almost\" : \"error\" : \"normal\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"letter\",\n    id: letterState,\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Letter, \"NGdNzkNFMFuuJGAytxfhXatCBRc=\");\n\n_c = Letter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"sources":["/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Letter.jsx"],"names":["React","useContext","EasyContext","Letter","letterPos","attemptVal","board","correctWord","currTry","letter","checkDuplicate","currWord","i","currLength","split","length","correct","noOfAttempt","almost","includes","letterState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,OAAO,YAAP;;AAEA,eAAe,SAASC,MAAT,OAAyC;AAAA;;AAAA,MAAzB;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAyB;AAEpD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAkCP,UAAU,CAACC,WAAD,CAAlD;AACA,QAAMO,MAAM,GAAGH,KAAK,CAACD,UAAD,CAAL,CAAkBD,SAAlB,CAAf;;AAEA,QAAMM,cAAc,GAAKD,MAAD,IAAY;AAChC,QAAIE,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIR,SAArB,EAAgCQ,CAAC,EAAjC,EAAqC;AACjCD,MAAAA,QAAQ,IAAIL,KAAK,CAACD,UAAD,CAAL,CAAkBO,CAAlB,CAAZ;AACH;;AACD,UAAMC,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAeL,MAAf,EAAuBM,MAA1C;AACA,UAAMA,MAAM,GAAGR,WAAW,CAACO,KAAZ,CAAkBL,MAAlB,EAA0BM,MAAzC;;AAEA,QAAIF,UAAU,GAAGE,MAAjB,EAAyB;AACrB,aAAO,KAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH,KAZ+B,CAahC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,GArBD;;AAuBA,QAAMC,OAAO,GAAGR,OAAO,CAACS,WAAR,GAAsBZ,UAAtB,IACTE,WAAW,CAACH,SAAD,CAAX,KAA2BK,MADlC;AAGA,QAAMS,MAAM,GAAGV,OAAO,CAACS,WAAR,GAAsBZ,UAAtB,IACR,CAACW,OADO,IACIP,MAAM,KAAK,EADf,IACqBF,WAAW,CAACY,QAAZ,CAAqBV,MAArB,CADrB,IAERC,cAAc,CAACD,MAAD,CAFrB;AAIA,QAAMW,WAAW,GAAIZ,OAAO,CAACS,WAAR,GAAsBZ,UAAtB,GACnBW,OAAO,GAAG,SAAH,GAAeE,MAAM,GAAG,QAAH,GAAc,OADvB,GACkC,QADvD;AAGA,sBACI;AAAK,IAAA,SAAS,EAAG,QAAjB;AAA0B,IAAA,EAAE,EAAIE,WAAhC;AAAA,cAA8CX;AAA9C;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH;;GA1CuBN,M;;KAAAA,M","sourcesContent":["import React, {useContext} from 'react';\nimport {EasyContext} from './Easy.jsx';\nimport '../App.css';\n\nexport default function Letter({letterPos, attemptVal}) {\n\n    const { board, correctWord, currTry } = useContext(EasyContext);\n    const letter = board[attemptVal][letterPos];\n\n    const checkDuplicate = ((letter) => {\n        var currWord = \"\";\n        for (let i = 0; i <= letterPos; i++) {\n            currWord += board[attemptVal][i];\n        }\n        const currLength = currWord.split(letter).length;\n        const length = correctWord.split(letter).length;\n\n        if (currLength > length) {\n            return false;\n        } else {\n            return true;\n        }\n        // why the following function does not work?\n        // const occurance = [...correctWord].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n        // const currOccur = [...currWord].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n        // if (occurance.get(letter) < currOccur.get(letter)) {\n        //     return false;\n        // } else {\n        //     return true;\n        // }\n    });\n\n    const correct = currTry.noOfAttempt > attemptVal \n        && correctWord[letterPos] === letter;\n\n    const almost = currTry.noOfAttempt > attemptVal \n        && !correct && letter !== \"\" && correctWord.includes(letter)\n        && checkDuplicate(letter);\n\n    const letterState =  currTry.noOfAttempt > attemptVal ?\n     (correct ? \"correct\" : almost ? \"almost\" : \"error\") : \"normal\";\n\n    return (\n        <div className = \"letter\" id = {letterState}>{letter}</div>\n    )\n    \n}"]},"metadata":{},"sourceType":"module"}