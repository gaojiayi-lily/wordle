{"ast":null,"code":"var _jsxFileName = \"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Easy.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport { boardDefault, generateWordSet } from './Words';\nimport Board from './Board';\nimport Navigation from './Navigation';\nimport Keyboard from './Keyboard';\nimport '../App.css';\nimport Toast from 'react-bootstrap/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EasyContext = /*#__PURE__*/createContext();\nexport default function Easy() {\n  _s();\n\n  const [board, setBoard] = useState(boardDefault);\n  const [currTry, setCurrTry] = useState({\n    noOfAttempt: 0,\n    letterPos: 0\n  });\n  const [sentense, setSentense] = useState(\"Everything looks good :)\");\n  const [wordSet, setWordSet] = useState(new Set());\n  const correctWord = \"RIGHT\";\n  useEffect(() => {\n    generateWordSet().then(words => {\n      setWordSet(words.wordSet);\n    });\n  }, []); //only run once with empty depend list\n\n  const [show, setShow] = useState(true);\n\n  const toggleShow = () => setShow(!show);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EasyContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currTry,\n        setCurrTry,\n        sentense,\n        setSentense,\n        correctWord,\n        wordSet\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-layout\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-layout\",\n          children: [/*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"margin-left\",\n            children: /*#__PURE__*/_jsxDEV(Toast, {\n              show: show,\n              onClose: toggleShow,\n              children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  className: \"me-auto\",\n                  children: \"Here is some suggestions you might need. Simply close it if you don't need any.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n                children: sentense\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Easy, \"7IOQDFXvosM60KNAdQDE5jTHC20=\");\n\n_c = Easy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Easy\");","map":{"version":3,"sources":["/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Easy.jsx"],"names":["React","useState","createContext","useEffect","boardDefault","generateWordSet","Board","Navigation","Keyboard","Toast","EasyContext","Easy","board","setBoard","currTry","setCurrTry","noOfAttempt","letterPos","sentense","setSentense","wordSet","setWordSet","Set","correctWord","then","words","show","setShow","toggleShow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,SAAxC,QAAwD,OAAxD;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,SAA9C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,EAAjC;AAEP,eAAe,SAASS,IAAT,GAAgB;AAAA;;AAE3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACG,YAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC;AAACe,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,SAAS,EAAE;AAA5B,GAAD,CAAtC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,0BAAD,CAAxC;AAEA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,IAAIqB,GAAJ,EAAD,CAAtC;AACA,QAAMC,WAAW,GAAG,OAApB;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,eAAe,GAAGmB,IAAlB,CAAwBC,KAAD,IAAW;AAC9BJ,MAAAA,UAAU,CAACI,KAAK,CAACL,OAAP,CAAV;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT,CAT2B,CAapB;;AAEP,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,IAAD,CAAhC;;AACA,QAAM2B,UAAU,GAAG,MAAMD,OAAO,CAAC,CAACD,IAAF,CAAhC;;AAEA,sBACI;AAAA,2BACI,QAAC,WAAD,CAAa,QAAb;AACI,MAAA,KAAK,EACD;AAACd,QAAAA,KAAD;AAAQC,QAAAA,QAAR;AACAC,QAAAA,OADA;AACSC,QAAAA,UADT;AAEAG,QAAAA,QAFA;AAEUC,QAAAA,WAFV;AAGAI,QAAAA,WAHA;AAIAH,QAAAA;AAJA,OAFR;AAAA,8BASI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI;AAAK,QAAA,SAAS,EAAG,YAAjB;AAAA,gCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAG,eAAjB;AAAA,kCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAG,aAAjB;AAAA,mCACI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAEM,IAAb;AAAmB,cAAA,OAAO,EAAEE,UAA5B;AAAA,sCACI,QAAC,KAAD,CAAO,MAAP;AAAA,uCACI;AAAQ,kBAAA,SAAS,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAOI,QAAC,KAAD,CAAO,IAAP;AAAA,0BAAaV;AAAb;AAAA;AAAA;AAAA;AAAA,sBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GAnDuBP,I;;KAAAA,I","sourcesContent":["import React, {useState, createContext, useEffect} from 'react';\nimport { boardDefault, generateWordSet } from './Words';\nimport Board from './Board';\nimport Navigation from './Navigation';\nimport Keyboard from './Keyboard';\nimport '../App.css';\nimport Toast from 'react-bootstrap/Toast';\n\nexport const EasyContext = createContext();\n\nexport default function Easy() {\n\n    const [board, setBoard] = useState(boardDefault);\n    const [currTry, setCurrTry] = useState({noOfAttempt: 0, letterPos: 0});\n    const [sentense, setSentense] = useState(\"Everything looks good :)\");\n    \n    const [wordSet, setWordSet] = useState(new Set());\n    const correctWord = \"RIGHT\";\n\n    useEffect(() => {\n        generateWordSet().then((words) => {\n            setWordSet(words.wordSet);\n        });\n    }, []) //only run once with empty depend list\n\n    const [show, setShow] = useState(true);\n    const toggleShow = () => setShow(!show);\n\n    return (\n        <div>\n            <EasyContext.Provider \n                value = {\n                    {board, setBoard, \n                    currTry, setCurrTry, \n                    sentense, setSentense, \n                    correctWord,\n                    wordSet}\n                }\n            >\n                <Navigation />\n                <div className = \"row-layout\">\n                    <Board />\n                    <div className = \"column-layout\">\n                        <Keyboard />\n                        <div className = \"margin-left\">\n                            <Toast show={show} onClose={toggleShow}>\n                                <Toast.Header>\n                                    <strong className=\"me-auto\">\n                                        Here is some suggestions you might need.\n                                        Simply close it if you don't need any.\n                                    </strong>\n                                </Toast.Header>\n                                <Toast.Body>{sentense}</Toast.Body>\n                            </Toast>\n                        </div>\n                    </div>\n                </div>\n            </EasyContext.Provider>\n        </div>\n    )\n    \n}"]},"metadata":{},"sourceType":"module"}