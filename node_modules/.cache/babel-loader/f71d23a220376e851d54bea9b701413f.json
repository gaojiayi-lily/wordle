{"ast":null,"code":"var _jsxFileName = \"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Easy.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport { boardDefault, generateWordSet } from './Words';\nimport Board from './Board';\nimport Navigation from '../Navigation';\nimport Keyboard from './Keyboard';\nimport GameOver from './GameOver';\nimport '../../App.css';\nimport Toast from 'react-bootstrap/Toast';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EasyContext = /*#__PURE__*/createContext();\nexport default function Easy() {\n  _s();\n\n  const [board, setBoard] = useState(boardDefault);\n  const [currTry, setCurrTry] = useState({\n    noOfAttempt: 0,\n    letterPos: 0\n  });\n  const [sentense, setSentense] = useState(\"Everything looks good :)\");\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessSuccess: false\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  useEffect(() => {\n    generateWordSet().then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.selectedWord);\n    });\n  }, []); //only run once with empty depend list\n\n  const [show, setShow] = useState(true);\n\n  const toggleShow = () => setShow(!show);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EasyContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currTry,\n        setCurrTry,\n        sentense,\n        setSentense,\n        gameOver,\n        setGameOver,\n        correctWord,\n        wordSet\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-layout\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-layout\",\n          children: [gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 45\n          }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 60\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"margin-left\",\n            children: [/*#__PURE__*/_jsxDEV(Toast, {\n              show: show,\n              onClose: toggleShow,\n              children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  className: \"me-auto\",\n                  children: \"Here is some suggestions you might need. Simply close it if you don't need any.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n                children: sentense\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-success\",\n              href: \"/easy\",\n              className: \"margin-left\",\n              children: \"Start Game Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Easy, \"pPvsAjGY6fq8ex9q2w8NLyuK8bw=\");\n\n_c = Easy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Easy\");","map":{"version":3,"sources":["/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Easy.jsx"],"names":["React","useState","createContext","useEffect","boardDefault","generateWordSet","Board","Navigation","Keyboard","GameOver","Toast","Button","EasyContext","Easy","board","setBoard","currTry","setCurrTry","noOfAttempt","letterPos","sentense","setSentense","correctWord","setCorrectWord","gameOver","setGameOver","guessSuccess","wordSet","setWordSet","Set","then","words","selectedWord","show","setShow","toggleShow"],"mappings":"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","sourcesContent":["import React, {useState, createContext, useEffect} from 'react';\nimport { boardDefault, generateWordSet } from './Words';\nimport Board from './Board';\nimport Navigation from '../Navigation';\nimport Keyboard from './Keyboard';\nimport GameOver from './GameOver';\nimport '../../App.css';\nimport Toast from 'react-bootstrap/Toast';\nimport Button from 'react-bootstrap/Button';\n\nexport const EasyContext = createContext();\n\nexport default function Easy() {\n\n    const [board, setBoard] = useState(boardDefault);\n    const [currTry, setCurrTry] = useState({noOfAttempt: 0, letterPos: 0});\n    const [sentense, setSentense] = useState(\"Everything looks good :)\");\n    const [correctWord, setCorrectWord] = useState(\"\");\n    const [gameOver, setGameOver] = useState({\n        gameOver: false,\n        guessSuccess: false,\n    });\n    \n    const [wordSet, setWordSet] = useState(new Set());\n\n    useEffect(() => {\n        generateWordSet().then((words) => {\n            setWordSet(words.wordSet);\n            setCorrectWord(words.selectedWord);\n        });\n    }, []) //only run once with empty depend list\n\n    const [show, setShow] = useState(true);\n    const toggleShow = () => setShow(!show);\n\n    return (\n        <div>\n            <EasyContext.Provider \n                value = {\n                    {board, setBoard, \n                    currTry, setCurrTry, \n                    sentense, setSentense, \n                    gameOver,setGameOver,\n                    correctWord,\n                    wordSet}\n                }\n            >\n                <Navigation />\n                <div className = \"row-layout\">\n                    <Board />\n                    <div className = \"column-layout\">\n                        {gameOver.gameOver? <GameOver /> : <Keyboard />}\n                        <div className = \"margin-left\">\n                            <Toast show={show} onClose={toggleShow}>\n                                <Toast.Header>\n                                    <strong className=\"me-auto\">\n                                        Here is some suggestions you might need.\n                                        Simply close it if you don't need any.\n                                    </strong>\n                                </Toast.Header>\n                                <Toast.Body>{sentense}</Toast.Body>\n                            </Toast>\n\n                            <p></p>\n                            <Button variant=\"outline-success\" href=\"/easy\" className = \"margin-left\">\n                                Start Game Again\n                            </Button>{' '}\n                        </div>\n                    </div>\n                </div>\n            </EasyContext.Provider>\n        </div>\n    )\n    \n}"]},"metadata":{},"sourceType":"module"}