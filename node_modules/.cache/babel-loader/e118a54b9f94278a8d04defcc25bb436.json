{"ast":null,"code":"var _jsxFileName = \"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Letter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { EasyContext } from './Easy.jsx';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Letter(_ref) {\n  _s();\n\n  let {\n    letterPos,\n    attemptVal\n  } = _ref;\n  const {\n    board,\n    correctWord,\n    currTry\n  } = useContext(EasyContext);\n  const letter = board[attemptVal][letterPos];\n  const occurance = [...correctWord].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n\n  const checkDuplicate = () => {\n    var currWord = \"\";\n\n    for (let i = 0; i <= letterPos; i++) {\n      currWord += board[attemptVal][i];\n    }\n\n    const currOccur = [...currWord].reduce((a, e) => {\n      a[e] = a[e] ? a[e] + 1 : 1;\n      return a;\n    }, {});\n    currOccur.forEach((value, key) => {\n      if (occurance.get(key) < value) {\n        return false;\n      }\n    });\n    return true;\n  };\n\n  const correct = currTry.noOfAttempt > attemptVal && correctWord[letterPos] === letter;\n  const almost = currTry.noOfAttempt > attemptVal && !correct && letter !== \"\" && correctWord.includes(letter) && checkDuplicate;\n  const letterState = currTry.noOfAttempt > attemptVal ? correct ? \"correct\" : almost ? \"almost\" : \"error\" : \"normal\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"letter\",\n    id: letterState,\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Letter, \"NGdNzkNFMFuuJGAytxfhXatCBRc=\");\n\n_c = Letter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"sources":["/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Letter.jsx"],"names":["React","useContext","EasyContext","Letter","letterPos","attemptVal","board","correctWord","currTry","letter","occurance","reduce","a","e","checkDuplicate","currWord","i","currOccur","forEach","value","key","get","correct","noOfAttempt","almost","includes","letterState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,OAAO,YAAP;;AAEA,eAAe,SAASC,MAAT,OAAyC;AAAA;;AAAA,MAAzB;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAyB;AAEpD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAkCP,UAAU,CAACC,WAAD,CAAlD;AACA,QAAMO,MAAM,GAAGH,KAAK,CAACD,UAAD,CAAL,CAAkBD,SAAlB,CAAf;AAEA,QAAMM,SAAS,GAAG,CAAC,GAAGH,WAAJ,EAAiBI,MAAjB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAED,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAD,GAAO,CAAd,GAAkB,CAAzB;AAA4B,WAAOD,CAAP;AAAU,GAA1E,EAA4E,EAA5E,CAAlB;;AAEA,QAAME,cAAc,GAAI,MAAM;AAC1B,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIZ,SAArB,EAAgCY,CAAC,EAAjC,EAAqC;AACjCD,MAAAA,QAAQ,IAAIT,KAAK,CAACD,UAAD,CAAL,CAAkBW,CAAlB,CAAZ;AACH;;AACD,UAAMC,SAAS,GAAG,CAAC,GAAGF,QAAJ,EAAcJ,MAAd,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAED,MAAAA,CAAC,CAACC,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAD,GAAO,CAAd,GAAkB,CAAzB;AAA4B,aAAOD,CAAP;AAAU,KAAvE,EAAyE,EAAzE,CAAlB;AACAK,IAAAA,SAAS,CAACC,OAAV,CAAkB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC9B,UAAIV,SAAS,CAACW,GAAV,CAAcD,GAAd,IAAqBD,KAAzB,EAAgC;AAC5B,eAAO,KAAP;AACH;AACJ,KAJD;AAKA,WAAO,IAAP;AACH,GAZD;;AAcA,QAAMG,OAAO,GAAGd,OAAO,CAACe,WAAR,GAAsBlB,UAAtB,IACTE,WAAW,CAACH,SAAD,CAAX,KAA2BK,MADlC;AAGA,QAAMe,MAAM,GAAGhB,OAAO,CAACe,WAAR,GAAsBlB,UAAtB,IACR,CAACiB,OADO,IACIb,MAAM,KAAK,EADf,IACqBF,WAAW,CAACkB,QAAZ,CAAqBhB,MAArB,CADrB,IAERK,cAFP;AAIA,QAAMY,WAAW,GAAIlB,OAAO,CAACe,WAAR,GAAsBlB,UAAtB,GACnBiB,OAAO,GAAG,SAAH,GAAeE,MAAM,GAAG,QAAH,GAAc,OADvB,GACkC,QADvD;AAGA,sBACI;AAAK,IAAA,SAAS,EAAG,QAAjB;AAA0B,IAAA,EAAE,EAAIE,WAAhC;AAAA,cAA8CjB;AAA9C;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH;;GAnCuBN,M;;KAAAA,M","sourcesContent":["import React, {useContext} from 'react';\nimport {EasyContext} from './Easy.jsx';\nimport '../App.css';\n\nexport default function Letter({letterPos, attemptVal}) {\n\n    const { board, correctWord, currTry } = useContext(EasyContext);\n    const letter = board[attemptVal][letterPos];\n\n    const occurance = [...correctWord].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n    \n    const checkDuplicate = (() => {\n        var currWord = \"\";\n        for (let i = 0; i <= letterPos; i++) {\n            currWord += board[attemptVal][i];\n        }\n        const currOccur = [...currWord].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n        currOccur.forEach((value, key) => {\n            if (occurance.get(key) < value) {\n                return false;\n            }\n        })\n        return true;\n    });\n\n    const correct = currTry.noOfAttempt > attemptVal \n        && correctWord[letterPos] === letter;\n\n    const almost = currTry.noOfAttempt > attemptVal \n        && !correct && letter !== \"\" && correctWord.includes(letter)\n        && checkDuplicate;\n\n    const letterState =  currTry.noOfAttempt > attemptVal ?\n     (correct ? \"correct\" : almost ? \"almost\" : \"error\") : \"normal\";\n\n    return (\n        <div className = \"letter\" id = {letterState}>{letter}</div>\n    )\n    \n}"]},"metadata":{},"sourceType":"module"}