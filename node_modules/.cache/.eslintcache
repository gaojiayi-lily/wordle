[{"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/index.js":"1","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/App.jsx":"2","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Main.jsx":"3","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Navigation.jsx":"4","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/About.jsx":"5","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Easy.jsx":"6","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Words.jsx":"7","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Keyboard.jsx":"8","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Board.jsx":"9","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/GameOver.jsx":"10","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Key.jsx":"11","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Letter.jsx":"12","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Medium.jsx":"13","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Words.jsx":"14","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Keyboard.jsx":"15","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Board.jsx":"16","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/GameOver.jsx":"17","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Key.jsx":"18","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Letter.jsx":"19","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Hard.jsx":"20","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Keyboard.jsx":"21","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/GameOver.jsx":"22","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Board.jsx":"23","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Words.jsx":"24","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Key.jsx":"25","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Letter.jsx":"26"},{"size":187,"mtime":1650056357550,"results":"27","hashOfConfig":"28"},{"size":709,"mtime":1650137551613,"results":"29","hashOfConfig":"28"},{"size":1906,"mtime":1650133478934,"results":"30","hashOfConfig":"28"},{"size":807,"mtime":1650047348836,"results":"31","hashOfConfig":"28"},{"size":3978,"mtime":1650134707995,"results":"32","hashOfConfig":"28"},{"size":2744,"mtime":1650135182021,"results":"33","hashOfConfig":"28"},{"size":676,"mtime":1650135283966,"results":"34","hashOfConfig":"28"},{"size":4775,"mtime":1650135265592,"results":"35","hashOfConfig":"28"},{"size":2703,"mtime":1650135141555,"results":"36","hashOfConfig":"28"},{"size":438,"mtime":1650135072049,"results":"37","hashOfConfig":"28"},{"size":2517,"mtime":1650135015820,"results":"38","hashOfConfig":"28"},{"size":1642,"mtime":1650135273191,"results":"39","hashOfConfig":"28"},{"size":2788,"mtime":1650137443832,"results":"40","hashOfConfig":"28"},{"size":727,"mtime":1650137321547,"results":"41","hashOfConfig":"28"},{"size":4781,"mtime":1650137045748,"results":"42","hashOfConfig":"28"},{"size":2699,"mtime":1650137037349,"results":"43","hashOfConfig":"28"},{"size":444,"mtime":1650137041495,"results":"44","hashOfConfig":"28"},{"size":2523,"mtime":1650137043530,"results":"45","hashOfConfig":"28"},{"size":1648,"mtime":1650137034140,"results":"46","hashOfConfig":"28"},{"size":2778,"mtime":1650138051100,"results":"47","hashOfConfig":"28"},{"size":4775,"mtime":1650137973689,"results":"48","hashOfConfig":"28"},{"size":438,"mtime":1650137979847,"results":"49","hashOfConfig":"28"},{"size":2577,"mtime":1650137983239,"results":"50","hashOfConfig":"28"},{"size":689,"mtime":1650138176269,"results":"51","hashOfConfig":"28"},{"size":2517,"mtime":1650137975934,"results":"52","hashOfConfig":"28"},{"size":1642,"mtime":1650137961080,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"i8tex8",{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"57"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"57"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"57"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"57"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"57"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/index.js",[],[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/App.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Main.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/Navigation.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/About.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Easy.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Words.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Keyboard.jsx",["140","141"],[],"import React, {useContext, useEffect, useCallback} from 'react';\nimport Key from './Key.jsx';\nimport {EasyContext} from './Easy.jsx';\nimport '../../App.css';\n\nexport default function Keyboard() {\n\n    const { board, setBoard, \n        currTry, setCurrTry, \n        setSentense, \n        wordSet, correctWord, \n        gameOver, setGameOver} \n        = useContext(EasyContext);\n\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n    const letterLength = 5;\n    const maxAttempt = 7;\n\n    const onSelectLetter = ((keyVal) => {\n        if (currTry.letterPos >= letterLength) {\n            setSentense(\"The Word is too long, honey :)\")\n            return;\n        }\n        setSentense(\"Everything looks good :)\");\n        const newBoard = [...board];\n        newBoard[currTry.noOfAttempt][currTry.letterPos] = keyVal;\n        setBoard(newBoard);\n        setCurrTry({...currTry, letterPos: currTry.letterPos + 1})\n    });\n\n    const handleKeyboard = useCallback((event) => {\n        if (event.key === \"Enter\") {\n            if (currTry.letterPos !== letterLength) {\n                setSentense(\"The Word is too short, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n\n            let currWord = \"\";\n            for (let i = 0; i < letterLength; i++) {\n                currWord += board[currTry.noOfAttempt][i];\n            }\n\n            if (wordSet.has(currWord.toLowerCase())) {\n                setCurrTry({noOfAttempt: currTry.noOfAttempt + 1, letterPos: 0});\n            } else {\n                setSentense(\"Word not exist :(\");\n                return;\n            }\n\n            if (currWord === correctWord.toUpperCase()) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: true,\n                })\n                return;\n            }\n\n            if (currTry.noOfAttempt === maxAttempt - 1) {\n                console.log(\"here!\")\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: false,\n                })\n                return;\n            }\n\n        } else if (event.key === \"Backspace\") {\n            if (currTry.letterPos === 0) {\n                setSentense(\"You cannot delete empty item.\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos - 1] = \"\";\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos - 1})\n\n        } else {\n            keys1.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n            keys2.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n            keys3.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n        }\n    }) \n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleKeyboard);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyboard);\n        }\n    }, [handleKeyboard])\n\n    return (\n        <div className = \"keyboard\" onKeyDown = {handleKeyboard}> \n            <div className = \"line1\">\n                {keys1.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n            </div>\n            <div className = \"line2\">\n                {keys2.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n            </div>\n            <div className = \"line3\">\n                <div className = \"key\" id = \"big\"> \n                    <Key keyVal = \"ENTER\" letterLength = {letterLength}/> \n                </div>\n                {keys3.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n                <div className = \"key\" id = \"big\"> \n                    <Key keyVal = \"DELETE\" letterLength = {letterLength}/> \n                </div>\n            </div>\n        </div>\n    )\n\n}","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Board.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/GameOver.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Key.jsx",["142"],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/easy/Letter.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Medium.jsx",["143"],[],"import React, {useState, createContext, useEffect} from 'react';\nimport { boardDefault, generateWordSet } from './Words';\nimport Board from './Board';\nimport Navigation from '../Navigation';\nimport Keyboard from './Keyboard';\nimport GameOver from './GameOver';\nimport '../../App.css';\nimport Toast from 'react-bootstrap/Toast';\nimport Button from 'react-bootstrap/Button';\n\nexport const MediumContext = createContext();\n\nexport default function Medium() {\n\n    const [board, setBoard] = useState(boardDefault);\n    const [currTry, setCurrTry] = useState({noOfAttempt: 0, letterPos: 0});\n    const [sentense, setSentense] = useState(\"Everything looks good :)\");\n    const [correctWord, setCorrectWord] = useState(\"\");\n    const [gameOver, setGameOver] = useState({\n        gameOver: false,\n        guessSuccess: false,\n    });\n    \n    const [wordSet, setWordSet] = useState(new Set());\n\n    useEffect(() => {\n        generateWordSet().then((words) => {\n            setWordSet(words.wordSet);\n            console.log(wordSet);\n            setCorrectWord(words.selectedWord);\n        });\n    }, []) //only run once with empty depend list\n\n    const [show, setShow] = useState(true);\n    const toggleShow = () => setShow(!show);\n\n    return (\n        <div>\n            <MediumContext.Provider \n                value = {\n                    {board, setBoard, \n                    currTry, setCurrTry, \n                    sentense, setSentense, \n                    gameOver,setGameOver,\n                    correctWord,\n                    wordSet}\n                }\n            >\n                <Navigation />\n                <div className = \"row-layout\">\n                    <Board />\n                    <div className = \"column-layout\">\n                        {gameOver.gameOver? <GameOver /> : <Keyboard />}\n                        <div className = \"margin-left\">\n                            <Toast show={show} onClose={toggleShow}>\n                                <Toast.Header>\n                                    <strong className=\"me-auto\">\n                                        Here is some suggestions you might need.\n                                        Simply close it if you don't need any.\n                                    </strong>\n                                </Toast.Header>\n                                <Toast.Body>{sentense}</Toast.Body>\n                            </Toast>\n\n                            <p></p>\n                            <Button variant=\"outline-success\" href=\"/medium\" className = \"margin-left\">\n                                Start Game Again\n                            </Button>{' '}\n                        </div>\n                    </div>\n                </div>\n            </MediumContext.Provider>\n        </div>\n    )\n    \n}","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Words.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Keyboard.jsx",["144","145"],[],"import React, {useContext, useEffect, useCallback} from 'react';\nimport Key from './Key.jsx';\nimport {MediumContext} from './Medium.jsx';\nimport '../../App.css';\n\nexport default function Keyboard() {\n\n    const { board, setBoard, \n        currTry, setCurrTry, \n        setSentense, \n        wordSet, correctWord, \n        gameOver, setGameOver} \n        = useContext(MediumContext);\n\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n    const letterLength = 6;\n    const maxAttempt = 6;\n\n    const onSelectLetter = ((keyVal) => {\n        if (currTry.letterPos >= letterLength) {\n            setSentense(\"The Word is too long, honey :)\")\n            return;\n        }\n        setSentense(\"Everything looks good :)\");\n        const newBoard = [...board];\n        newBoard[currTry.noOfAttempt][currTry.letterPos] = keyVal;\n        setBoard(newBoard);\n        setCurrTry({...currTry, letterPos: currTry.letterPos + 1})\n    });\n\n    const handleKeyboard = useCallback((event) => {\n        if (event.key === \"Enter\") {\n            if (currTry.letterPos !== letterLength) {\n                setSentense(\"The Word is too short, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n\n            let currWord = \"\";\n            for (let i = 0; i < letterLength; i++) {\n                currWord += board[currTry.noOfAttempt][i];\n            }\n\n            if (wordSet.has(currWord.toLowerCase())) {\n                setCurrTry({noOfAttempt: currTry.noOfAttempt + 1, letterPos: 0});\n            } else {\n                setSentense(\"Word not exist :(\");\n                return;\n            }\n\n            if (currWord === correctWord.toUpperCase()) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: true,\n                })\n                return;\n            }\n\n            if (currTry.noOfAttempt === maxAttempt - 1) {\n                console.log(\"here!\")\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: false,\n                })\n                return;\n            }\n\n        } else if (event.key === \"Backspace\") {\n            if (currTry.letterPos === 0) {\n                setSentense(\"You cannot delete empty item.\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos - 1] = \"\";\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos - 1})\n\n        } else {\n            keys1.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n            keys2.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n            keys3.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n        }\n    }) \n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleKeyboard);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyboard);\n        }\n    }, [handleKeyboard])\n\n    return (\n        <div className = \"keyboard\" onKeyDown = {handleKeyboard}> \n            <div className = \"line1\">\n                {keys1.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n            </div>\n            <div className = \"line2\">\n                {keys2.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n            </div>\n            <div className = \"line3\">\n                <div className = \"key\" id = \"big\"> \n                    <Key keyVal = \"ENTER\" letterLength = {letterLength}/> \n                </div>\n                {keys3.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n                <div className = \"key\" id = \"big\"> \n                    <Key keyVal = \"DELETE\" letterLength = {letterLength}/> \n                </div>\n            </div>\n        </div>\n    )\n\n}","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Board.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/GameOver.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Key.jsx",["146"],[],"import React, {useContext} from 'react';\nimport {MediumContext} from './Medium.jsx';\n\nexport default function Key({keyVal, letterLength}) {\n\n    const { board, setBoard, \n        currTry, setCurrTry, \n        setSentense, \n        wordSet, correctWord, \n        gameOver, setGameOver} \n        = useContext(MediumContext);\n    const maxAttempt = 6;\n\n    const selectLetter = () => {\n        if (keyVal === \"ENTER\") {\n            if (currTry.letterPos !== letterLength) {\n                setSentense(\"The Word is too short, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n\n            let currWord = \"\";\n            for (let i = 0; i < letterLength; i++) {\n                currWord += board[currTry.noOfAttempt][i];\n            }\n\n            if (wordSet.has(currWord.toLowerCase())) {\n                setCurrTry({noOfAttempt: currTry.noOfAttempt + 1, letterPos: 0});\n            } else {\n                setSentense(\"Word not exist :(\");\n                return;\n            }\n\n            if (currWord === correctWord.toUpperCase()) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: true,\n                })\n                return;\n            }\n\n            if (currTry.noOfAttempt === maxAttempt - 1) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: false,\n                })\n                return;\n            }\n\n        } else if (keyVal === \"DELETE\") {\n            if (currTry.letterPos === 0) {\n                setSentense(\"You cannot delete empty item.\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos - 1] = \"\";\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos - 1})\n\n        } else {\n            if (currTry.letterPos >= letterLength) {\n                setSentense(\"The Word is too long, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos] = keyVal;\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos + 1})\n\n        }\n    }\n\n    return (\n        <div>\n            <div onClick = {selectLetter}>\n                {keyVal}\n            </div>\n        </div>\n    )\n\n}\n","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/medium/Letter.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Hard.jsx",["147"],[],"import React, {useState, createContext, useEffect} from 'react';\nimport { boardDefault, generateWordSet } from './Words';\nimport Board from './Board';\nimport Navigation from '../Navigation';\nimport Keyboard from './Keyboard';\nimport GameOver from './GameOver';\nimport '../../App.css';\nimport Toast from 'react-bootstrap/Toast';\nimport Button from 'react-bootstrap/Button';\n\nexport const HardContext = createContext();\n\nexport default function Hard() {\n\n    const [board, setBoard] = useState(boardDefault);\n    const [currTry, setCurrTry] = useState({noOfAttempt: 0, letterPos: 0});\n    const [sentense, setSentense] = useState(\"Everything looks good :)\");\n    const [correctWord, setCorrectWord] = useState(\"\");\n    const [gameOver, setGameOver] = useState({\n        gameOver: false,\n        guessSuccess: false,\n    });\n    \n    const [wordSet, setWordSet] = useState(new Set());\n\n    useEffect(() => {\n        generateWordSet().then((words) => {\n            setWordSet(words.wordSet);\n            console.log(wordSet);\n            setCorrectWord(words.selectedWord);\n        });\n    }, []) //only run once with empty depend list\n\n    const [show, setShow] = useState(true);\n    const toggleShow = () => setShow(!show);\n\n    return (\n        <div>\n            <HardContext.Provider \n                value = {\n                    {board, setBoard, \n                    currTry, setCurrTry, \n                    sentense, setSentense, \n                    gameOver,setGameOver,\n                    correctWord,\n                    wordSet}\n                }\n            >\n                <Navigation />\n                <div className = \"row-layout\">\n                    <Board />\n                    <div className = \"column-layout\">\n                        {gameOver.gameOver? <GameOver /> : <Keyboard />}\n                        <div className = \"margin-left\">\n                            <Toast show={show} onClose={toggleShow}>\n                                <Toast.Header>\n                                    <strong className=\"me-auto\">\n                                        Here is some suggestions you might need.\n                                        Simply close it if you don't need any.\n                                    </strong>\n                                </Toast.Header>\n                                <Toast.Body>{sentense}</Toast.Body>\n                            </Toast>\n\n                            <p></p>\n                            <Button variant=\"outline-success\" href=\"/easy\" className = \"margin-left\">\n                                Start Game Again\n                            </Button>{' '}\n                        </div>\n                    </div>\n                </div>\n            </HardContext.Provider>\n        </div>\n    )\n    \n}","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Keyboard.jsx",["148","149"],[],"import React, {useContext, useEffect, useCallback} from 'react';\nimport Key from './Key.jsx';\nimport {HardContext} from './Hard.jsx';\nimport '../../App.css';\n\nexport default function Keyboard() {\n\n    const { board, setBoard, \n        currTry, setCurrTry, \n        setSentense, \n        wordSet, correctWord, \n        gameOver, setGameOver} \n        = useContext(HardContext);\n\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n    const letterLength = 7;\n    const maxAttempt = 5;\n\n    const onSelectLetter = ((keyVal) => {\n        if (currTry.letterPos >= letterLength) {\n            setSentense(\"The Word is too long, honey :)\")\n            return;\n        }\n        setSentense(\"Everything looks good :)\");\n        const newBoard = [...board];\n        newBoard[currTry.noOfAttempt][currTry.letterPos] = keyVal;\n        setBoard(newBoard);\n        setCurrTry({...currTry, letterPos: currTry.letterPos + 1})\n    });\n\n    const handleKeyboard = useCallback((event) => {\n        if (event.key === \"Enter\") {\n            if (currTry.letterPos !== letterLength) {\n                setSentense(\"The Word is too short, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n\n            let currWord = \"\";\n            for (let i = 0; i < letterLength; i++) {\n                currWord += board[currTry.noOfAttempt][i];\n            }\n\n            if (wordSet.has(currWord.toLowerCase())) {\n                setCurrTry({noOfAttempt: currTry.noOfAttempt + 1, letterPos: 0});\n            } else {\n                setSentense(\"Word not exist :(\");\n                return;\n            }\n\n            if (currWord === correctWord.toUpperCase()) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: true,\n                })\n                return;\n            }\n\n            if (currTry.noOfAttempt === maxAttempt - 1) {\n                console.log(\"here!\")\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: false,\n                })\n                return;\n            }\n\n        } else if (event.key === \"Backspace\") {\n            if (currTry.letterPos === 0) {\n                setSentense(\"You cannot delete empty item.\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos - 1] = \"\";\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos - 1})\n\n        } else {\n            keys1.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n            keys2.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n            keys3.forEach((key) => {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    onSelectLetter(key);\n                }\n            })\n        }\n    }) \n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleKeyboard);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyboard);\n        }\n    }, [handleKeyboard])\n\n    return (\n        <div className = \"keyboard\" onKeyDown = {handleKeyboard}> \n            <div className = \"line1\">\n                {keys1.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n            </div>\n            <div className = \"line2\">\n                {keys2.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n            </div>\n            <div className = \"line3\">\n                <div className = \"key\" id = \"big\"> \n                    <Key keyVal = \"ENTER\" letterLength = {letterLength}/> \n                </div>\n                {keys3.map((key) => {\n                    return (\n                    <div className = \"key\"> \n                        <Key keyVal = {key} letterLength = {letterLength}/>\n                    </div>)\n                })}\n                <div className = \"key\" id = \"big\"> \n                    <Key keyVal = \"DELETE\" letterLength = {letterLength}/> \n                </div>\n            </div>\n        </div>\n    )\n\n}","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/GameOver.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Board.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Words.jsx",[],[],"/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Key.jsx",["150"],[],"import React, {useContext} from 'react';\nimport {HardContext} from './Hard.jsx';\n\nexport default function Key({keyVal, letterLength}) {\n\n    const { board, setBoard, \n        currTry, setCurrTry, \n        setSentense, \n        wordSet, correctWord, \n        gameOver, setGameOver} \n        = useContext(HardContext);\n    const maxAttempt = 5;\n\n    const selectLetter = () => {\n        if (keyVal === \"ENTER\") {\n            if (currTry.letterPos !== letterLength) {\n                setSentense(\"The Word is too short, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n\n            let currWord = \"\";\n            for (let i = 0; i < letterLength; i++) {\n                currWord += board[currTry.noOfAttempt][i];\n            }\n\n            if (wordSet.has(currWord.toLowerCase())) {\n                setCurrTry({noOfAttempt: currTry.noOfAttempt + 1, letterPos: 0});\n            } else {\n                setSentense(\"Word not exist :(\");\n                return;\n            }\n\n            if (currWord === correctWord.toUpperCase()) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: true,\n                })\n                return;\n            }\n\n            if (currTry.noOfAttempt === maxAttempt - 1) {\n                setGameOver({\n                    gameOver: true,\n                    guessSuccess: false,\n                })\n                return;\n            }\n\n        } else if (keyVal === \"DELETE\") {\n            if (currTry.letterPos === 0) {\n                setSentense(\"You cannot delete empty item.\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos - 1] = \"\";\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos - 1})\n\n        } else {\n            if (currTry.letterPos >= letterLength) {\n                setSentense(\"The Word is too long, honey :)\")\n                return;\n            }\n            setSentense(\"Everything looks good :)\");\n            const newBoard = [...board];\n            newBoard[currTry.noOfAttempt][currTry.letterPos] = keyVal;\n            setBoard(newBoard);\n            setCurrTry({...currTry, letterPos: currTry.letterPos + 1})\n\n        }\n    }\n\n    return (\n        <div>\n            <div onClick = {selectLetter}>\n                {keyVal}\n            </div>\n        </div>\n    )\n\n}\n","/Users/lilygao/Desktop/CS 5610/MA2/project2/jiayi-gao-project2/src/component/hard/Letter.jsx",[],[],{"ruleId":"151","severity":1,"message":"152","line":12,"column":9,"nodeType":"153","messageId":"154","endLine":12,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":33,"column":28,"nodeType":"153","endLine":33,"endColumn":39},{"ruleId":"151","severity":1,"message":"152","line":10,"column":9,"nodeType":"153","messageId":"154","endLine":10,"endColumn":17},{"ruleId":"155","severity":1,"message":"157","line":32,"column":8,"nodeType":"158","endLine":32,"endColumn":10,"suggestions":"159"},{"ruleId":"151","severity":1,"message":"152","line":12,"column":9,"nodeType":"153","messageId":"154","endLine":12,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":33,"column":28,"nodeType":"153","endLine":33,"endColumn":39},{"ruleId":"151","severity":1,"message":"152","line":10,"column":9,"nodeType":"153","messageId":"154","endLine":10,"endColumn":17},{"ruleId":"155","severity":1,"message":"157","line":32,"column":8,"nodeType":"158","endLine":32,"endColumn":10,"suggestions":"160"},{"ruleId":"151","severity":1,"message":"152","line":12,"column":9,"nodeType":"153","messageId":"154","endLine":12,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":33,"column":28,"nodeType":"153","endLine":33,"endColumn":39},{"ruleId":"151","severity":1,"message":"152","line":10,"column":9,"nodeType":"153","messageId":"154","endLine":10,"endColumn":17},"no-unused-vars","'gameOver' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect has a missing dependency: 'wordSet'. Either include it or remove the dependency array.","ArrayExpression",["161"],["162"],{"desc":"163","fix":"164"},{"desc":"163","fix":"165"},"Update the dependencies array to be: [wordSet]",{"range":"166","text":"167"},{"range":"168","text":"167"},[1093,1095],"[wordSet]",[1089,1091]]